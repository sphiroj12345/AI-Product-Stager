
import { GoogleGenAI, Modality } from "@google/genai";

if (!process.env.API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const getMimeType = (base64Data: string): string | null => {
  const match = base64Data.match(/^data:(image\/[a-z]+);base64,/);
  return match ? match[1] : null;
};

const cleanBase64 = (base64Data: string): string => {
  return base64Data.replace(/^data:image\/[a-z]+;base64,/, "");
};

export const generateProductImage = async (base64ImageData: string, prompt: string): Promise<string> => {
  try {
    const mimeType = getMimeType(base64ImageData);
    if (!mimeType) {
      throw new Error("Invalid base64 image data: Could not determine MIME type.");
    }
    const cleanData = cleanBase64(base64ImageData);

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: cleanData,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    throw new Error("No image was generated by the AI. Please try a different prompt or image.");

  } catch (error) {
    console.error("Error generating image with Gemini:", error);
    if (error instanceof Error) {
        return Promise.reject(error.message);
    }
    return Promise.reject("An unknown error occurred during image generation.");
  }
};
